iris = datasets.load _iris
data = iris.data
labels = iris.target
for i in [0, 79, 99, 101]:
print(f"index: {i:3}, features: {data[i]}, label: { labels[i]}")
np.random.seed(42)
indices = np.random.permutation(len(data)) _training_samples = 12
learn _data = data[indices:-_training_samples]]
learn _labels = labels[indices[:-n_training_samples]]
colours = (r", "g", "y")
fig = plt.figure
ax = fig.add_subplot(111, projection="3d)
for iclass in range(3):
ax.scatter(X[iclass][0], X[iclass][1], X[iclass][2], c=colours [iclass ])
pit.show
.#=
def distance(instancel. instance2):
C a l c u l a t e s t h e l ' u c l e d i a n d i s t a n c e b e t w e e n ( w o i n s t a n c e s " " "
return np.linalg.normnp.subtractinstancel, instance2))
def get _neighbors(training set, labels, test_instance, k. distance):
get_neighors calculates a list of the k nearest neighbors of an instance test_instance'.
"The function returns a list o f k 3-tuples. E a c h 3-tuples consists o f (index, dist, label)
distances = []
for index in range(len(training_set)):
dist = distance(test_instance, training_set[index])
distances.append(training_set[index], dist, labels_index]))
distances.sort(key=lambda x: x[1])
neighbors = distances [k]
return neighbors
for i in range(5):
neighbors = get_neighbors(learn _data, learn_labels, test _data(f], 3, distance=distance)
print("Index:
",i,n', "Testset Data: ",test _data[i], 'n',
"Testset Label: ",test_labels [*], \n',
"Neighbors: ",neighbors, \n')
